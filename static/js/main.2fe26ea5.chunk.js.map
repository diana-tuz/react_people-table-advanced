{"version":3,"sources":["components/Navbar.tsx","api.ts","components/Context.tsx","App.tsx","components/HomePage.tsx","utils/searchHelper.ts","components/SearchLink.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTable.tsx","components/PeoplePage.tsx","Root.tsx","index.tsx"],"names":["Navbar","className","role","isActive","classNames","to","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","Sort","Filter","PeopleContext","createContext","allPeople","setAllPeople","filteredPeople","sort","all","setSort","isLoading","setIsLoading","setIsError","isError","selectedCenturies","setSelectedCenturies","preperedPeople","PeopleContextProvider","children","useState","setFilteredPeople","useEffect","getPeople","people","peopleWithParrents","preparedData","map","person","newPerson","father","find","name","fatherName","mother","motherName","catch","finally","useSearchParams","searchParams","query","get","sex","centuries","getAll","useMemo","filter","personName","toLowerCase","normalQuery","includes","length","century","Math","ceil","born","sortBy","order","died","a","b","localeCompare","reverse","value","Provider","App","HomePage","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","delete","Array","isArray","part","append","set","SearchLink","params","props","search","PeopleFilters","setSearchParams","useContext","male","female","type","placeholder","onChange","event","target","currentCenturies","centuryToToggle","year","Loader","PersonLink","slug","personSlug","useParams","isWomen","pathname","PeopleTable","getSort","getOrder","handleClick","getLinkClass","PeoplePage","Root","path","element","replace","index","container","document","getElementById","createRoot","render"],"mappings":"mPAIaA,EAAS,WACpB,OACE,qBACE,UAAQ,MACRC,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEA,UAAW,gBAAGE,EAAH,EAAGA,SAAH,OAAkBC,IAC3B,cAAe,CACb,8BAA+BD,GAFxB,EAKXE,GAAG,IANL,kBAWA,cAAC,IAAD,CACEJ,UAAW,gBAAGE,EAAH,EAAGA,SAAH,OAAkBC,IAC3B,cAAe,CACb,8BAA+BD,GAFxB,EAKXE,GAAG,UANL,0BAcT,E,4CCpCKC,EACF,oEAEJ,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAASF,EAAjC,GACpB,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAACE,GAAD,OAAcA,EAASC,MAAvB,KAJH,4C,sBCAA,IAAKC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MAQYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,SAAYA,EAAZ,WAAYA,EAAZ,kBAAYA,CAAZ,MA0BaC,EAAgBC,wBAA2B,CACtDC,UAAW,GACXC,aAAc,WAAS,EACvBC,eAAgB,GAChBC,KAAMP,EAAKQ,IACXC,QAAS,WAAS,EAClBC,WAAW,EACXC,aAAc,WAAS,EACvBC,WAAY,WAAS,EACrBC,SAAS,EACTC,kBAAmB,GACnBC,qBAAsB,WAAS,EAC/BC,eAAgB,KAGLC,EAAyC,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACvD,EAAkCC,mBAAmB,IAArD,mBAAOf,EAAP,KAAkBC,EAAlB,KACA,EAA4Cc,mBAAmBf,GAA/D,mBAAOE,EAAP,KAAuBc,EAAvB,KAEA,EAAkCD,oBAAkB,GAApD,mBAAOT,EAAP,KAAkBC,EAAlB,KACA,EAA8BQ,oBAAkB,GAAhD,mBAAON,EAAP,KAAgBD,EAAhB,KAEA,EAAwBO,mBAAenB,EAAKQ,KAA5C,mBAAOD,EAAP,KAAaE,EAAb,KACA,EAAkDU,mBAAmB,IAArE,mBAAOL,EAAP,KAA0BC,EAA1B,KAoBAM,qBAAU,WACRV,GAAa,GACbC,GAAW,GD/ER,WAAP,+BCgFIU,GACG1B,MAAK,SAAC2B,GACL,IAvBcC,EAuBRC,GAvBQD,EAuBkBD,GAtBSG,KAAI,SAACC,GAChD,IAAMC,EAAS,eAAQD,GAUvB,OARAC,EAAUC,OAASL,EAAmBM,MACpC,SAACD,GAAD,OAAYA,EAAOE,OAASH,EAAUI,UAAtC,IAGFJ,EAAUK,OAAST,EAAmBM,MACpC,SAACG,GAAD,OAAYA,EAAOF,OAASH,EAAUM,UAAtC,IAGKN,CACR,IAYGvB,EAAaoB,GACbL,EAAkBK,EACnB,IACAU,OAAM,kBAAMvB,GAAW,EAAjB,IACNwB,SAAQ,kBAAMzB,GAAa,EAAnB,GACZ,GAAE,IAEH,MAAuB0B,cAAhBC,EAAP,oBACMC,EAAQD,EAAaE,IAAI,UAAY,GACrCC,EAAMH,EAAaE,IAAI,QAAU,GACjCE,EAAYJ,EAAaK,OAAO,cAAgB,GAEhD3B,EAA2B4B,mBAAQ,WACvC,IAAIrB,EAASnB,EAETqC,IACFlB,EAASA,EAAOsB,QAAO,SAAClB,GAAD,OAAYA,EAAOc,MAAQA,CAA3B,KAGrBF,IACFhB,EAASA,EAAOsB,QAAO,SAAClB,GAAY,IAAD,IAC3BmB,EAAanB,EAAOI,KAAKgB,cACzBf,EAAU,UAAGL,EAAOK,kBAAV,aAAG,EAAmBe,cAChCb,EAAU,UAAGP,EAAOO,kBAAV,aAAG,EAAmBa,cAChCC,EAAcT,EAAMQ,cAE1B,OACED,EAAWG,SAASD,KAApB,OACGhB,QADH,IACGA,OADH,EACGA,EAAYiB,SAASD,MADxB,OAEGd,QAFH,IAEGA,OAFH,EAEGA,EAAYe,SAASD,GAE3B,KAGCN,EAAUQ,OAAS,IACrB3B,EAASA,EAAOsB,QACd,SAAClB,GAAD,OAAYe,EAAUZ,MACpB,SAACqB,GAAD,OAAaC,KAAKC,KAAK1B,EAAO2B,KAAO,QAAUH,CAA/C,GADF,KAMJ,IAAMI,EAASjB,EAAaE,IAAI,QAC1BgB,EAAQlB,EAAaE,IAAI,SAE/B,OAAQe,GACN,KAAKvD,EAAKQ,IACRe,EAASnB,EACT,MACF,KAAKJ,EAAKyD,KACV,KAAKzD,EAAKsD,KACR/B,EAAOhB,MAAK,SAACmD,EAAGC,GAAJ,OAAUD,EAAEH,GAAUI,EAAEJ,EAAxB,IACZ,MAEF,KAAKvD,EAAK+B,KACV,KAAK/B,EAAKyC,IACRlB,EAAOhB,MAAK,SAACmD,EAAGC,GAAJ,OAAUD,EAAEH,GAAQK,cAAcD,EAAEJ,GAApC,IACZ,MACF,QACE,OAAOhC,EAOX,OAJIiC,GACFjC,EAAOsC,UAGFtC,CACR,GAAE,CAACjB,EAAgBgC,IAEdwB,EAAQ,CACZ1D,YACAC,eACAe,oBACAd,iBACAC,OACAE,UACAC,YACAE,aACAD,eACAE,UACAC,oBACAC,uBACAC,kBAGF,OACE,cAACd,EAAc6D,SAAf,CAAwBD,MAAOA,EAA/B,SAAuC5C,GAE1C,EChLY8C,EAAM,WACjB,OACE,cAAC,EAAD,UACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,sBAAM/E,UAAU,UAAhB,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,YAMX,ECpBYgF,EAAW,WACtB,OACE,oBAAIhF,UAAU,QAAd,sBAEH,E,gBCIM,SAASiF,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBAAgBH,EAAcI,YA6BpD,OAhBAC,OAAOC,QAAQL,GAAgBM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXb,EAAW,KACzC,OAAVA,EACFO,EAAUO,OAAOD,GACRE,MAAMC,QAAQhB,IAEvBO,EAAUO,OAAOD,GAEjBb,EAAMY,SAAQ,SAACK,GACbV,EAAUW,OAAOL,EAAKI,EACvB,KAEDV,EAAUY,IAAIN,EAAKb,EAEtB,IAGMO,EAAUE,UAClB,C,4BC5BYW,EAA8B,SAAC,GAIrC,IAHLhE,EAGI,EAHJA,SACAiE,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuB/C,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIEjD,GAAI,CACFgG,OAAQnB,EAAc5B,EAAc6C,KAElCC,GAPN,aASGlE,IAGN,EC3BYoE,EAAgB,WAC3B,MAAwCjD,cAAxC,mBAAOC,EAAP,KAAqBiD,EAArB,KAEMhD,EAAQD,EAAaE,IAAI,UAAY,GACrCC,EAAMH,EAAaE,IAAI,QAAU,GACjCE,EAAYJ,EAAaK,OAAO,cAAgB,GAS9C7B,EAAsB0E,qBAAWtF,GAAjCY,kBAeR,OACE,sBAAK7B,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,EAAD,CACEkG,OAAQ,CAAE1C,IAAK,MACfxD,UAAWG,IAAW,CAAE,aAAcqD,IAFxC,iBAMA,cAAC,EAAD,CACE0C,OAAQ,CAAE1C,IAAKxC,EAAOwF,MACtBxG,UAAWG,IAAW,CAAE,YAAaqD,IAAQxC,EAAOwF,OAFtD,kBAMA,cAAC,EAAD,CACEN,OAAQ,CAAE1C,IAAKxC,EAAOyF,QACtBzG,UAAWG,IAAW,CACpB,YAAaqD,IAAQxC,EAAOyF,SAHhC,uBAUF,qBAAKzG,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACR0G,KAAK,SACL1G,UAAU,QACV2G,YAAY,SACZ9B,MAAOvB,EACPsD,SA1DgB,SAACC,GACzB,IAAMT,EAASnB,EAAc5B,EAAc,CACzCC,MAAOuD,EAAMC,OAAOjC,OAAS,OAG/ByB,EAAgBF,EACjB,IAuDO,sBAAMpG,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UAxEe,CAAC,KAAM,KAAM,KAAM,KAAM,MAyExByC,KAAI,SAACyB,GAAD,OAChB,cAAC,EAAD,CAEE,UAAQ,UACRlE,UAAWG,IAAW,SAAU,OAAQ,CACtC,UAAWsD,EAAUO,SAASE,KAEhCgC,QAjEVa,EAiEwCtD,EAhExCuD,EAgEmD9C,EA1D5C,CACLT,UALuBsD,EAAiB/C,SAASgD,GAC/CD,EAAiBnD,QAAO,SAACqD,GAAD,OAAUA,IAASD,CAAnB,IADH,sBAEjBD,GAFiB,CAECC,MAsDlB,SAQG9C,GAPIA,GA7Da,IAC5B6C,EACAC,CAyDwB,IAYlB,cAAC,EAAD,CACE,UAAQ,aACRhH,UAAWG,IAAW,oBAAqB,CACzC,cAAoC,IAArBsD,EAAUQ,SAE3BiC,OAAQ,CAAEzC,UAAW,MALvB,sBAYJ,qBAAKzD,UAAU,cAAf,SACE,cAAC,EAAD,CACEA,UAAWG,IAAW,oBAAqB,CACzC,cAA4C,IAA7B0B,EAAkBoC,SAEnCiC,OAAQ,CAAEzC,UAAW,KAAMD,IAAK,MAJlC,mCAWP,ECrHY0D,G,MAAS,kBACpB,qBAAKlH,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCWTmH,EAA8B,SAAC,GAAgB,IAAdzE,EAAa,EAAbA,OAE1CI,EASEJ,EATFI,KACAuB,EAQE3B,EARF2B,KACAG,EAOE9B,EAPF8B,KACAzB,EAMEL,EANFK,WACAH,EAKEF,EALFE,OACAK,EAIEP,EAJFO,WACAD,EAGEN,EAHFM,OACAQ,EAEEd,EAFFc,IACA4D,EACE1E,EADF0E,KAGMC,EAAeC,cAAfD,WAEFE,EAAkB,MAAR/D,EAChB,EAAuBJ,cAAhBC,EAAP,oBAEA,OACE,qBACE,UAAQ,SAERrD,UAAWG,IACT,CAAE,yBAA0BkH,IAAeD,IAJ/C,UAOE,6BACE,cAAC,IAAD,CACEhH,GAAI,CACFoH,SAAS,WAAD,OAAaJ,GACrBhB,OAAQ/C,EAAaiC,YAEvBtF,UAAWG,IACT,CAAE,kBAAmBoH,IANzB,SASGzE,MAIL,6BAAKU,IACL,6BAAKa,IACL,6BAAKG,IAEJxB,EACC,6BACE,cAAC,IAAD,CACEhD,UAAU,kBACVI,GAAI,CACFoH,SAAS,WAAD,OAAaxE,EAAOoE,MAC5BhB,OAAQ/C,EAAaiC,YAJzB,SAOGrC,MAIL,6BAAKA,GAAc,MAGpBL,EACC,6BACE,cAAC,IAAD,CACExC,GAAI,CACFoH,SAAS,WAAD,OAAa5E,EAAOwE,MAC5BhB,OAAQ/C,EAAaiC,YAHzB,SAMGvC,MAIL,6BAAKA,GAAc,QAnDhBD,EAuDV,ECjFY2E,EAAc,WACzB,IAAQ1F,EAAmBwE,qBAAWtF,GAA9Bc,eAER,EAAuBqB,cAAhBC,EAAP,oBAEMqE,EAAUrE,EAAaE,IAAI,QAC3BoE,EAAWtE,EAAaE,IAAI,SAE5BqE,EAAc,SAACtG,GACnB,OAKS2D,EAAc5B,EALlBqE,GAAYC,EAIbD,IAAYC,EACqB,CAAErG,KAAMoG,EAASnD,MAAO,QAG1B,CAAEjD,KAAM,KAAMiD,MAAO,MAPnB,CAAEjD,QAQxC,EAEKuG,EAAe,SAAChD,GACpB,OAAO1E,IAAW,MAAO,CACvB,WAAYuH,GAAWA,IAAY7C,EACnC,aAAc6C,IAAY7C,IAAU8C,EACpC,eAAgBD,IAAY7C,GAAS8C,GAExC,EAED,OACE,wBACE,UAAQ,cACR3H,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CACEI,GAAI,CAAEgG,OAAQwB,EAAY7G,EAAK+B,OADjC,SAGE,sBAAM9C,UAAU,OAAhB,SACE,mBAAGA,UAAW6H,EAAa9G,EAAK+B,iBAMxC,6BACE,uBAAM9C,UAAU,8BAAhB,gBAEE,cAAC,IAAD,CAAMI,GAAI,CAAEgG,OAAQwB,EAAY7G,EAAKyC,MAArC,SACE,sBAAMxD,UAAU,OAAhB,SACE,mBAAGA,UAAW6H,EAAa9G,EAAKyC,gBAMxC,6BACE,uBAAMxD,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CAAMI,GAAI,CAAEgG,OAAQwB,EAAY7G,EAAKsD,OAArC,SACE,sBAAMrE,UAAU,OAAhB,SACE,mBAAGA,UAAW6H,EAAa9G,EAAKsD,iBAMxC,6BACE,uBAAMrE,UAAU,8BAAhB,iBAEE,cAAC,IAAD,CAAMI,GAAI,CAAEgG,OAAQwB,EAAY7G,EAAKyD,OAArC,SACE,sBAAMxE,UAAU,OAAhB,SACE,mBAAGA,UAAW6H,EAAa9G,EAAKyD,iBAMxC,wCACA,6CAIJ,gCACGzC,EAAeU,KAAI,SAACC,GACnB,OAAO,cAAC,EAAD,CAAYA,OAAQA,GAAaA,EAAOI,KAChD,QAIR,EC9FYgF,EAAa,WACxB,MAKIvB,qBAAWtF,GAJbI,EADF,EACEA,eACAF,EAFF,EAEEA,UACAM,EAHF,EAGEA,UACAG,EAJF,EAIEA,QAGF,OACE,qCACE,oBAAI5B,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACE,cAAC,EAAD,MAGF,qBAAKA,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACGyB,GAAa,cAAC,EAAD,IACbG,GACC,mBAAG,UAAQ,qBAAX,mCAEAH,GAAkC,IAArBN,EAAU8C,QACvB,mBAAG,UAAQ,kBAAX,gDAKAxC,GAAuC,IAA1BJ,EAAe4C,QAC5B,0FAGAxC,IAAcG,GAAW,cAAC,EAAD,gBAOxC,ECtCYmG,EAAO,kBAClB,cAAC,IAAD,UACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOD,KAAK,QAAQC,QAAS,cAAC,IAAD,CAAU7H,GAAG,IAAI8H,SAAO,MACrD,cAAC,IAAD,CAAOC,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,eAAC,IAAD,CAAOD,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOG,OAAK,EAACF,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOD,KAAK,cAAcC,QAAS,cAAC,EAAD,SAErC,cAAC,IAAD,CAAOD,KAAK,IAAIC,QAAS,oBAAIjI,UAAU,QAAd,8BACzB,cAAC,IAAD,UAXY,ECLdoI,G,YAAYC,SAASC,eAAe,SAE1CC,qBAAWH,GACRI,OAAO,cAAC,EAAD,I","file":"static/js/main.2fe26ea5.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\n\nimport classNames from 'classnames';\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item', {\n                'has-background-grey-lighter': isActive,\n              },\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item', {\n                'has-background-grey-lighter': isActive,\n              },\n            )}\n            to=\"/people\"\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL\n  = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise((resolve) => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then((response) => response.json());\n}\n","import React, {\n  createContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\n\nexport enum Sort {\n  all = 'all',\n  sex = 'sex',\n  born = 'born',\n  died = 'died',\n  name = 'name',\n}\n\nexport enum Filter {\n  all = 'all',\n  male = 'm',\n  female = 'f',\n  century = 'century',\n}\n\ninterface ContextData {\n  allPeople: Person[];\n  setAllPeople: (a: Person[]) => void;\n  filteredPeople: Person[];\n  sort: Sort;\n  setSort: (a: Sort) => void;\n  isLoading: boolean;\n  setIsLoading: (a: boolean) => void;\n  setIsError: (a: boolean) => void;\n  isError: boolean;\n  selectedCenturies: number[];\n  setSelectedCenturies: (a: number[]) => void;\n  preperedPeople: Person[];\n}\n\ntype Props = {\n  children: React.ReactNode;\n};\n\nexport const PeopleContext = createContext<ContextData>({\n  allPeople: [],\n  setAllPeople: () => { },\n  filteredPeople: [],\n  sort: Sort.all,\n  setSort: () => { },\n  isLoading: false,\n  setIsLoading: () => { },\n  setIsError: () => { },\n  isError: false,\n  selectedCenturies: [],\n  setSelectedCenturies: () => { },\n  preperedPeople: [],\n});\n\nexport const PeopleContextProvider: React.FC<Props> = ({ children }) => {\n  const [allPeople, setAllPeople] = useState<Person[]>([]);\n  const [filteredPeople, setFilteredPeople] = useState<Person[]>(allPeople);\n\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [isError, setIsError] = useState<boolean>(false);\n\n  const [sort, setSort] = useState<Sort>(Sort.all);\n  const [selectedCenturies, setSelectedCenturies] = useState<number[]>([]);\n\n  const getParents = (peopleWithParrents: Person[]) => {\n    const peopleWithParents = peopleWithParrents.map((person) => {\n      const newPerson = { ...person };\n\n      newPerson.father = peopleWithParrents.find(\n        (father) => father.name === newPerson.fatherName,\n      );\n\n      newPerson.mother = peopleWithParrents.find(\n        (mother) => mother.name === newPerson.motherName,\n      );\n\n      return newPerson;\n    });\n\n    return peopleWithParents;\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n    setIsError(false);\n    getPeople()\n      .then((people) => {\n        const preparedData = getParents(people);\n\n        setAllPeople(preparedData);\n        setFilteredPeople(preparedData);\n      })\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const [searchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const preperedPeople: Person[] = useMemo(() => {\n    let people = allPeople;\n\n    if (sex) {\n      people = people.filter((person) => person.sex === sex);\n    }\n\n    if (query) {\n      people = people.filter((person) => {\n        const personName = person.name.toLowerCase();\n        const fatherName = person.fatherName?.toLowerCase();\n        const motherName = person.motherName?.toLowerCase();\n        const normalQuery = query.toLowerCase();\n\n        return (\n          personName.includes(normalQuery)\n          || fatherName?.includes(normalQuery)\n          || motherName?.includes(normalQuery)\n        );\n      });\n    }\n\n    if (centuries.length > 0) {\n      people = people.filter(\n        (person) => centuries.find(\n          (century) => Math.ceil(person.born / 100) === +century,\n        ),\n      );\n    }\n\n    const sortBy = searchParams.get('sort');\n    const order = searchParams.get('order');\n\n    switch (sortBy) {\n      case Sort.all:\n        people = allPeople;\n        break;\n      case Sort.died:\n      case Sort.born:\n        people.sort((a, b) => a[sortBy] - b[sortBy]);\n        break;\n\n      case Sort.name:\n      case Sort.sex:\n        people.sort((a, b) => a[sortBy].localeCompare(b[sortBy]));\n        break;\n      default:\n        return people;\n    }\n\n    if (order) {\n      people.reverse();\n    }\n\n    return people;\n  }, [filteredPeople, searchParams]);\n\n  const value = {\n    allPeople,\n    setAllPeople,\n    setFilteredPeople,\n    filteredPeople,\n    sort,\n    setSort,\n    isLoading,\n    setIsError,\n    setIsLoading,\n    isError,\n    selectedCenturies,\n    setSelectedCenturies,\n    preperedPeople,\n  };\n\n  return (\n    <PeopleContext.Provider value={value}>{children}</PeopleContext.Provider>\n  );\n};\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { PeopleContextProvider } from './components/Context';\n\nexport const App = () => {\n  return (\n    <PeopleContextProvider>\n      <div data-cy=\"app\">\n        <Navbar />\n\n        <main className=\"section\">\n          <div className=\"container\">\n            <Outlet />\n          </div>\n        </main>\n      </div>\n    </PeopleContextProvider>\n  );\n};\n","export const HomePage = () => {\n  return (\n    <h1 className=\"title\">Home Page</h1>\n  );\n};\n","export type SearchParams = {\n  [key: string]: string | string[] | null;\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(currentParams.toString());\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate).forEach(([key, value]) => {\n    if (value === null) {\n      newParams.delete(key);\n    } else if (Array.isArray(value)) {\n      // we delete the key to remove old values\n      newParams.delete(key);\n\n      value.forEach((part) => {\n        newParams.append(key, part);\n      });\n    } else {\n      newParams.set(key, value);\n    }\n  });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams;\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = ({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n};\n","import { useContext } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Filter, PeopleContext } from './Context';\nimport { SearchLink } from './SearchLink';\n\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleFilters = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const centuriesArr = ['16', '17', '18', '19', '20'];\n  const query = searchParams.get('query') || '';\n  const sex = searchParams.get('sex') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const search = getSearchWith(searchParams, {\n      query: event.target.value || null,\n    });\n\n    setSearchParams(search);\n  };\n\n  const { selectedCenturies } = useContext(PeopleContext);\n\n  const updateCenturiesParams = (\n    currentCenturies: string[],\n    centuryToToggle: string,\n  ) => {\n    const updatedCenturies = currentCenturies.includes(centuryToToggle)\n      ? currentCenturies.filter((year) => year !== centuryToToggle)\n      : [...currentCenturies, centuryToToggle];\n\n    return {\n      centuries: updatedCenturies,\n    };\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <SearchLink\n          params={{ sex: null }}\n          className={classNames({ 'is-active': !sex })}\n        >\n          All\n        </SearchLink>\n        <SearchLink\n          params={{ sex: Filter.male }}\n          className={classNames({ 'is-active': sex === Filter.male })}\n        >\n          Male\n        </SearchLink>\n        <SearchLink\n          params={{ sex: Filter.female }}\n          className={classNames({\n            'is-active': sex === Filter.female,\n          })}\n        >\n          Female\n        </SearchLink>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          {centuriesArr.map((century) => (\n            <SearchLink\n              key={century}\n              data-cy=\"century\"\n              className={classNames('button', 'mr-1', {\n                'is-info': centuries.includes(century),\n              })}\n              params={updateCenturiesParams(centuries, century)}\n            >\n              {century}\n            </SearchLink>\n          ))}\n          <SearchLink\n            data-cy=\"centuryALL\"\n            className={classNames('button is-success', {\n              'is-outlined': centuries.length !== 0,\n            })}\n            params={{ centuries: null }}\n          >\n            All\n          </SearchLink>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className={classNames('button is-success', {\n            'is-outlined': selectedCenturies.length !== 0,\n          })}\n          params={{ centuries: null, sex: null }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React from 'react';\nimport {\n  useParams,\n  Link,\n  useSearchParams,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../types';\n\ntype Props = {\n  person: Person\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    born,\n    died,\n    fatherName,\n    father,\n    motherName,\n    mother,\n    sex,\n    slug,\n  } = person;\n\n  const { personSlug } = useParams();\n\n  const isWomen = sex === 'f';\n  const [searchParams] = useSearchParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      key={name}\n      className={classNames(\n        { 'has-background-warning': personSlug === slug },\n      )}\n    >\n      <td>\n        <Link\n          to={{\n            pathname: `/people/${slug}`,\n            search: searchParams.toString(),\n          }}\n          className={classNames(\n            { 'has-text-danger': isWomen },\n          )}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      {mother ? (\n        <td>\n          <Link\n            className=\"has-text-danger\"\n            to={{\n              pathname: `/people/${mother.slug}`,\n              search: searchParams.toString(),\n            }}\n          >\n            {motherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{motherName || '-'}</td>\n      )}\n\n      {father ? (\n        <td>\n          <Link\n            to={{\n              pathname: `/people/${father.slug}`,\n              search: searchParams.toString(),\n            }}\n          >\n            {fatherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{fatherName || '-'}</td>\n      )}\n    </tr>\n  );\n};\n","import { useContext } from 'react';\nimport { Link, useSearchParams } from 'react-router-dom';\n\nimport classNames from 'classnames';\nimport { PersonLink } from './PersonLink';\nimport { Sort, PeopleContext } from './Context';\nimport { getSearchWith } from '../utils/searchHelper';\n\nexport const PeopleTable = () => {\n  const { preperedPeople } = useContext(PeopleContext);\n\n  const [searchParams] = useSearchParams();\n\n  const getSort = searchParams.get('sort');\n  const getOrder = searchParams.get('order');\n\n  const handleClick = (sort: Sort) => {\n    if (!getSort && !getOrder) {\n      return getSearchWith(searchParams, { sort });\n    }\n\n    if (getSort && !getOrder) {\n      return getSearchWith(searchParams, { sort: getSort, order: 'desc' });\n    }\n\n    return getSearchWith(searchParams, { sort: null, order: null });\n  };\n\n  const getLinkClass = (value: string) => {\n    return classNames('fas', {\n      'fa-sort': !getSort || getSort !== value,\n      'fa-sort-up': getSort === value && !getOrder,\n      'fa-sort-down': getSort === value && getOrder,\n    });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Name\n              <Link\n                to={{ search: handleClick(Sort.name) }}\n              >\n                <span className=\"icon\">\n                  <i className={getLinkClass(Sort.name)} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Sex\n              <Link to={{ search: handleClick(Sort.sex) }}>\n                <span className=\"icon\">\n                  <i className={getLinkClass(Sort.sex)} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Born\n              <Link to={{ search: handleClick(Sort.born) }}>\n                <span className=\"icon\">\n                  <i className={getLinkClass(Sort.born)} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              Died\n              <Link to={{ search: handleClick(Sort.died) }}>\n                <span className=\"icon\">\n                  <i className={getLinkClass(Sort.died)} />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {preperedPeople.map((person) => {\n          return <PersonLink person={person} key={person.name} />;\n        })}\n      </tbody>\n    </table>\n  );\n};\n","import { useContext } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\n\nimport { PeopleContext } from './Context';\n\nexport const PeoplePage = () => {\n  const {\n    filteredPeople,\n    allPeople,\n    isLoading,\n    isError,\n  } = useContext(PeopleContext);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            <PeopleFilters />\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n              {isError && (\n                <p data-cy=\"peopleLoadingError\">Something went wrong</p>\n              )}\n              {!isLoading && allPeople.length === 0 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {!isLoading && filteredPeople.length === 0 && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n\n              {!isLoading && !isError && <PeopleTable />}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Navigate,\n  Route,\n  HashRouter as Router,\n  Routes,\n} from 'react-router-dom';\nimport { App } from './App';\nimport { HomePage } from './components/HomePage';\nimport { PeoplePage } from './components/PeoplePage';\n\nexport const Root = () => (\n  <Router>\n    <Routes>\n      <Route path=\"/\" element={<App />}>\n        <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n        <Route index element={<HomePage />} />\n        <Route path=\"people\">\n          <Route index element={<PeoplePage />} />\n          <Route path=\":personSlug\" element={<PeoplePage />} />\n        </Route>\n        <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        <Route />\n      </Route>\n    </Routes>\n  </Router>\n);\n","import { createRoot } from 'react-dom/client';\nimport { Root } from './Root';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nconst container = document.getElementById('root') as HTMLDivElement;\n\ncreateRoot(container)\n  .render(<Root />);\n"],"sourceRoot":""}